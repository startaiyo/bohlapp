{"ast":null,"code":"var _jsxFileName = \"/Users/startaiyo/bohl/bohlapp/src/App.js\";\nimport axios from 'axios';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Dropzone, {\n      onDrop: this.onDrop,\n      children: ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fileArea\",\n          ...getRootProps(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop some files here, or click to select files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; // Convert file to base64 string\n\nexport const fileToBase64 = async file => {\n  return new Promise(resolve => {\n    const reader = new FileReader(); // Read file content on file loaded event\n\n    reader.onload = event => {\n      resolve(event.target.result);\n    }; // Convert data to base64 \n\n\n    reader.readAsDataURL(file);\n  });\n}; // Encode Base64\n\nexport const toBase64 = async file => {\n  return fileToBase64(file).then(result => {\n    return result;\n  });\n};","map":{"version":3,"sources":["/Users/startaiyo/bohl/bohlapp/src/App.js"],"names":["axios","React","Dropzone","App","Component","render","onDrop","getRootProps","getInputProps","fileToBase64","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","toBase64","then"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAEhCC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAE,KAAKC,MAAvB;AAAA,gBACG,CAAC;AAACC,QAAAA,YAAD;AAAeC,QAAAA;AAAf,OAAD,kBACC;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,aAA8BD,YAAY,EAA1C;AAAA,kCACE,sBAAWC,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAf+B;;AAkBlC,eAAeL,GAAf,C,CAEA;;AACA,OAAO,MAAMM,YAAY,GAAG,MAAOC,IAAP,IAAgB;AAC1C,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf,CAD4B,CAG5B;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBC,KAAD,IAAW;AACzBJ,MAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAP;AACD,KAFD,CAJ4B,CAQ5B;;;AACAL,IAAAA,MAAM,CAACM,aAAP,CAAqBT,IAArB;AACD,GAVM,CAAP;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMU,QAAQ,GAAG,MAAOV,IAAP,IAAgB;AACtC,SAAOD,YAAY,CAACC,IAAD,CAAZ,CAAmBW,IAAnB,CAAyBH,MAAD,IAAY;AACzC,WAAOA,MAAP;AACD,GAFM,CAAP;AAGD,CAJM","sourcesContent":["import axios from 'axios';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone'\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section>\n            <div className=\"fileArea\" {...getRootProps()}>\n              <input {...getInputProps()} />\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default App;\n\n// Convert file to base64 string\nexport const fileToBase64 = async (file) => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n\n    // Read file content on file loaded event\n    reader.onload = (event) => {\n      resolve(event.target.result);\n    };\n    \n    // Convert data to base64 \n    reader.readAsDataURL(file);\n  });\n};\n\n// Encode Base64\nexport const toBase64 = async (file) => {\n  return fileToBase64(file).then((result) => {\n    return result;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}