{"ast":null,"code":"var _jsxFileName = \"/Users/startaiyo/bohl/bohlapp/src/App.js\";\nimport axios from 'axios';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDrop = async files => {\n      // アップロードするBase64文字列を格納する配列\n      const uploadFiles = []; // Base64 にファイルをエンコード\n\n      for (const file of files) {\n        const result = await toBase64(file);\n        uploadFiles.push(result);\n      }\n\n      ; // JSON を stirng に変換\n\n      const data = JSON.stringify({\n        'files': uploadFiles\n      }); // XMLHTTPRequest で POST 送信を行う\n\n      axios.post('https://vyq3zznjx3.execute-api.ap-northeast-1.amazonaws.com/default/bohlfunc', data, {\n        headers: {\n          'Content-Type': 'image/'\n        }\n      }).then(res => {\n        alert('Success!');\n      }).catch(e => {\n        alert('Error!' + e);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Dropzone, {\n      onDrop: this.onDrop,\n      children: ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fileArea\",\n          ...getRootProps(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop some files here, or click to select files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; // Convert file to base64 string\n\nexport const fileToBase64 = async file => {\n  return new Promise(resolve => {\n    const reader = new FileReader(); // Read file content on file loaded event\n\n    reader.onload = event => {\n      resolve(event.target.result);\n    }; // Convert data to base64 \n\n\n    reader.readAsDataURL(file);\n  });\n}; // Encode Base64\n\nexport const toBase64 = async file => {\n  return fileToBase64(file).then(result => {\n    return result;\n  });\n};","map":{"version":3,"sources":["/Users/startaiyo/bohl/bohlapp/src/App.js"],"names":["axios","React","Dropzone","App","Component","onDrop","files","uploadFiles","file","result","toBase64","push","data","JSON","stringify","post","headers","then","res","alert","catch","e","render","getRootProps","getInputProps","fileToBase64","Promise","resolve","reader","FileReader","onload","event","target","readAsDataURL"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAEhCC,MAFgC,GAEvB,MAAOC,KAAP,IAAiB;AACxB;AACA,YAAMC,WAAW,GAAG,EAApB,CAFwB,CAIxB;;AACA,WAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA2B;AACzB,cAAMG,MAAM,GAAG,MAAMC,QAAQ,CAACF,IAAD,CAA7B;AACAD,QAAAA,WAAW,CAACI,IAAZ,CAAiBF,MAAjB;AACD;;AAAA,OARuB,CAUxB;;AACA,YAAMG,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAC,iBAASP;AAAV,OAAf,CAAb,CAXwB,CAaxB;;AACAP,MAAAA,KAAK,CAACe,IAAN,CAAW,8EAAX,EACAH,IADA,EAEA;AACEI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADX,OAFA,EAOEC,IAPF,CAOQC,GAAD,IAAU;AACfC,QAAAA,KAAK,CAAC,UAAD,CAAL;AACD,OATD,EASGC,KATH,CASUC,CAAD,IAAO;AACdF,QAAAA,KAAK,CAAC,WAAWE,CAAZ,CAAL;AACD,OAXD;AAaD,KA7B+B;AAAA;;AA+BhCC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAE,KAAKjB,MAAvB;AAAA,gBACG,CAAC;AAACkB,QAAAA,YAAD;AAAeC,QAAAA;AAAf,OAAD,kBACC;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,aAA8BD,YAAY,EAA1C;AAAA,kCACE,sBAAWC,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA5C+B;;AA+ClC,eAAerB,GAAf,C,CAEA;;AACA,OAAO,MAAMsB,YAAY,GAAG,MAAOjB,IAAP,IAAgB;AAC1C,SAAO,IAAIkB,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf,CAD4B,CAG5B;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBC,KAAD,IAAW;AACzBJ,MAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAavB,MAAd,CAAP;AACD,KAFD,CAJ4B,CAQ5B;;;AACAmB,IAAAA,MAAM,CAACK,aAAP,CAAqBzB,IAArB;AACD,GAVM,CAAP;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOF,IAAP,IAAgB;AACtC,SAAOiB,YAAY,CAACjB,IAAD,CAAZ,CAAmBS,IAAnB,CAAyBR,MAAD,IAAY;AACzC,WAAOA,MAAP;AACD,GAFM,CAAP;AAGD,CAJM","sourcesContent":["import axios from 'axios';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone'\nimport './App.css';\n\nclass App extends React.Component {\n\n  onDrop = async (files) => {\n    // アップロードするBase64文字列を格納する配列\n    const uploadFiles = [];\n\n    // Base64 にファイルをエンコード\n    for (const file of files)  {\n      const result = await toBase64(file);\n      uploadFiles.push(result);\n    };\n\n    // JSON を stirng に変換\n    const data = JSON.stringify({'files': uploadFiles});\n\n    // XMLHTTPRequest で POST 送信を行う\n    axios.post('https://vyq3zznjx3.execute-api.ap-northeast-1.amazonaws.com/default/bohlfunc',\n    data,\n    {\n      headers: {\n        'Content-Type': 'image/'\n      }\n    }\n    ).then((res) =>  {\n      alert('Success!');\n    }).catch((e) => {\n      alert('Error!' + e);\n    });    \n\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section>\n            <div className=\"fileArea\" {...getRootProps()}>\n              <input {...getInputProps()} />\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default App;\n\n// Convert file to base64 string\nexport const fileToBase64 = async (file) => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n\n    // Read file content on file loaded event\n    reader.onload = (event) => {\n      resolve(event.target.result);\n    };\n    \n    // Convert data to base64 \n    reader.readAsDataURL(file);\n  });\n};\n\n// Encode Base64\nexport const toBase64 = async (file) => {\n  return fileToBase64(file).then((result) => {\n    return result;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}